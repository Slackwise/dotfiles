#!/bin/sh
# vim: fdm=marker

#set -euo pipefail # For actual scripts, refuse failure!

# use [[ over test or [ commands. Rationale: https://google.github.io/styleguide/shell.xml?showone=Test,_%5B_and_%5B%5B#Test,_%5B_and_%5B%5B


# Lowercase all variables created in this file to avoid conflicts with environment variables.
# Use underscores to separate words in variable names, e.g. my_variable_name.
# Use ALL_CAPS for environment variables only.


# SCRIPT DEBUGGING UTILITIES ------------------------------------------------{{{
# $bashrc_debug=true
if [[ -z $bashrc_debug ]]; then
  bashrc_debug=false
fi
function debug
{
  $bashrc_debug && echo "[BASHRC DEBUG] $1"
}
debug "Starting bashrc debugging..."
#----------------------------------------------------------------------------}}}


# GLOBAL UTILITY VARIABLES --------------------------------------------------{{{
export LAMBDA=$'\u03BB'
export EDITOR=/usr/bin/vim
export DOTFILES=$HOME/src/dotfiles
debug "Global variables exported."
#----------------------------------------------------------------------------}}}


# GLOBAL UTILITY FUNCTIONS --------------------------------------------------{{{
function empty_string {
  [[ -z "$1" ]]
}

function nonempty_string {
  [[ -n "$1" ]]
}

function command_exists {
  type "$1" &> /dev/null
}

function file_exists {
  [[ -e "$1" ]]
}

function readable_file_exists {
  [[ -r "$1" ]]
}

function nonempty_file_exists {
  [[ -s "$1" ]]
}

function color_shade {
  echo -e "${shade_color}$1${colors[neutre]}"
}

function color_change {
  echo -e "${change_color}$1${colors[neutre]}"
}

function color_warn {
  echo -e "${warn_color}$1${colors[neutre]}"
}

function color_error {
  echo -e "${error_color}$1${colors[neutre]}"
}

function pcolor {
  echo -e "\[$1\]"
}

function prompt_color {
  local color="$1"
  shift # Remove first argument so $@ contains only strings to colorize
  local result=""
  for str in "$@"; do
    result+="\[$color\]$str"
  done
  echo -e "${result}\[${colors[neutre]}\]"
}

function ps1_status {
  if [[ $1 -ne 0 ]]; then
    echo -e "$(color_shade $box_line$box_line)$(color_error $1)$(color_shade $box_line)"
  fi
}

debug "Global functions read."
#----------------------------------------------------------------------------}}}


# WSL JUNK ----------------------------------------------------------------{{{
if nonempty_string $WSL_DISTRO_NAME; then
  debug "Detected WSL, retrieving WSL variables..."
  export WINDOWS_USERNAME=$(cmd.exe /q /d /c "echo %USERNAME%" 2> /dev/null)
  export WINDOWS_USERPROFILE=$(cmd.exe /q /d /c "echo %USERPROFILE%" 2> /dev/null)
  debug "Exported WSL variables."
fi
#----------------------------------------------------------------------------}}}


# SOURCE SYSTEM BASHRC ------------------------------------------------------{{{
debug "Sourcing system bashrc..."
if readable_file_exists ~/.bashrc.sys ; then
  source ~/.bashrc.sys
fi
debug "Sourced system bashrc."
#----------------------------------------------------------------------------}}}


# LOCAL UTILITY VARIABLES ---------------------------------------------------{{{
if [[ $UID == 0 ]]; then
  is_root_user=true
fi

if nonempty_string "$SSH_CONNECTION" ; then
  is_ssh_connection=true
fi

if [[ $LANG == "en_US.UTF-8" ]]; then
  is_unicode_term=true
fi

# Color Escapes
declare -A colors=(
  [black]="\e[30m"
  [black_hi]="\e[0;90m"
  [black_hi_bg]="\e[0;100m"
  [red]="\e[31m"
  [green]="\e[32m"
  [yellow]="\e[33m"
  [blue]="\e[34m"
  [purple]="\e[35m"
  [cyan]="\e[36m"
  [white]="\e[37m"
  [white_on_red]="\e[41m"
  [neutre]="\e[m"
)

# Color Escapes with Prompt Escapes:
declare -A prompt_colors
for color_name in "${!colors[@]}"; do
  prompt_colors[$color_name]="\[${colors[$color_name]}\]"
done


# Named colors: pull values from the colors associative array
shade_color=${colors[black_hi]}
change_color=${colors[green]}
warn_color=${colors[yellow]}
error_color=${colors[red]}


# BOX-DRAWING UNICODE:
box_top_left=$'\u256D'
box_bottom_left=$'\u2570'
box_line=$'\u2500'
box_line_left_half=$'\u2574'
box_line_right_half=$'\u2576'

debug "Local variables read."
#----------------------------------------------------------------------------}}}



# BUILD UP A CUSTOM PROMPT --------------------------------------------------{{{
export PS1=""
function prompt
{
  export PS1=$PS1$1
}

prompt "`pcolor ${colors[black_hi]}`"
prompt "$box_top_left"
prompt "$box_line"
prompt "$box_line"

# If root, highlight in bright red:
  if [[ $is_root_user ]]; then
  prompt `pcolor ${colors[white_on_red]}`;
  debug "Is root user."
else
  debug "Not root user."
fi

# Add timestamp:
prompt "$box_line_left_half"
prompt "\@"
prompt "$box_line_right_half"
prompt "$box_line"
prompt "$box_line"

# Check if $USER is not set or is empty, AND $USERNAME is set and not empty
# This is primarily an issue for "Git Bash" on Windows.
if empty_string "$USER" && nonempty_string "$USERNAME" ; then
  export USER="$USERNAME"
fi

if [[ "$USER" == "slackwise" || "$USER" == "Slackwise" || "$USER" == "aflanczewski" ]]; then
  debug "Is default user '$USER'."
else
  prompt "\u";
  debug "Not my default user, so display username '$USER'."
fi


# If connected to a machine via SSH, show the hostname:
if [[ $is_ssh_connection ]]; then
  prompt "@\H"
  debug "Is SSH connection."
else
  debug "Not SSH connection."
fi

prompt "$box_line_left_half\w" # Add full working directory

function my_prompt_command() {
  # Not necessary anymore, but leaving this in case I need it in the future.
  return 0;
}
export PROMPT_COMMAND='my_prompt_command'

export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUPSTREAM="auto" # or "verbose", "true", "git"
export GIT_PS1_COMPRESSSPARSESTATE=1
export GIT_PS1_FULL_DESC=1
prompt "\`__git_ps1\`" # Add git branch info if in a git repo

prompt "`pcolor ${colors[neutre]}`" # Reset before newline to avoid rendering issues
prompt "\n" # Add a newline before the prompt because directories tend to take up too much space
prompt "`pcolor ${colors[black_hi]}`" # Resume coloring, hopefully avoiding the rendering issues

prompt "$box_bottom_left"
prompt "\`ps1_status \$?\`" # Show status of last command, if it failed
prompt "`pcolor ${colors[black_hi]}`" # Resume coloring, hopefully avoiding the rendering issues
prompt "$box_line_left_half" 


if [[ $is_unicode_term ]]; then
  # prompt "`pcolor ${colors[green]}`$LAMBDA`pcolor ${colors[neutre]}`"
  prompt `prompt_color ${colors[green]} $LAMBDA`
  debug "Is unicode terminal."
else
  prompt "`pcolor ${colors[green]}`\$`pcolor ${colors[neutre]}`"
  debug "Not unicode terminal."
fi

prompt "`pcolor ${colors[neutre]}`" # Reset color to neutral
prompt " " # Add a trailing blank to give space for commands

if [[ $is_root_user ]]; then prompt `pcolor ${colors[neutre]}`; fi

# export UNPROCESSED_PROMPT="$PS1" # Save the unprocessed prompt for later use
unset -f P # Remove our temporary utility function
debug "Prompt created."
#----------------------------------------------------------------------------}}}


# CONSOLE CONFIG ------------------------------------------------------------{{{
# TODO: If a VT, run the next line:
# setterm -powersave off -blank 0
debug "Console config loaded."
#----------------------------------------------------------------------------}}}


# GUIX CONFIG ---------------------------------------------------------------{{{
GUIX_PROFILE=$HOME/.guix-profile
if file_exists "$GUIX_PROFILE"; then
  export GUIX_PROFILE
  export GUIX_LOCPATH="$GUIX_PROFILE/lib/locale${GUIX_LOCPATH:+:}$GUIX_LOCPATH"
  export PATH="$GUIX_PROFILE/bin:/root/.guix-profile/sbin${PATH:+:}$PATH"
  source $GUIX_PROFILE/etc/profile
  debug "Guix config loaded."
else
  debug "Guix config skipped."
fi
#----------------------------------------------------------------------------}}}


# RVM CONFIG ----------------------------------------------------------------{{{
if nonempty_file_exists "$HOME/.rvm/scripts/rvm"; then
  source "$HOME/.rvm/scripts/rvm"
  export PATH=$HOME/.rvm/bin:$PATH
  debug "RVM config loaded."
else
  debug "RVM config skipped."
fi
#----------------------------------------------------------------------------}}}


# FNM CONFIG ----------------------------------------------------------------{{{
if command_exists fnm; then
  eval "$(fnm env --use-on-cd --shell bash)"
  debug "Fast Node Manager (FNM) config loaded."
else
  debug "Fast Node Manager (FNM) config skipped."
fi
#----------------------------------------------------------------------------}}}


# DOOM EMACS CONFIG ---------------------------------------------------------{{{
if file_exists "$HOME/.emacs.d/bin/doom"; then
  export PATH=$HOME/.emacs.d/bin:$PATH
  debug "Doom Emacs config loaded."
else
  debug "Doom Emacs config skipped."
fi
#----------------------------------------------------------------------------}}}


# My personal PATH additions, which must precede all others:
export PATH=.:$HOME/.bin:$HOME/src/dotfiles/bin:$PATH


# Aliases:

# Command Aliases
alias g='git'
alias git-add-all='git add . && git status'
alias git-commit-version='git commit -m "$(cat VERSION.TXT)" ; git log -1'
alias e="emacsclient -c -n --alternate-editor= "
alias grep-all="grep -rni"
alias kill-e="emacsclient -e '(kill-emacs)'"
alias emacs-detached="emacs & disown %%"
alias unixtime='date +%s'

# Short Script Aliases
alias wsl-guix-daemon-start="sudo -i -u root guix-daemon &"
alias wsl-guix-daemon-stop="sudo -i -u root killall -9 guix-daemon"
alias update-ubuntu="sudo -s eval 'NEEDRESTART_MODE=a apt update && apt dist-upgrade -y'"
alias update-guix="guix pull && guix upgrade"
alias update-dotfiles="git -C $HOME/src/dotfiles pull"
alias update-notes="git -C $HOME/notes pull ; git -C $HOME/notes/private pull"
alias update-emacs="update-dotfiles ; update-notes ; doom up --force"
alias update-system="update-ubuntu ; update-guix"
alias update-wsl="update-ubuntu ; update-guix ; update-emacs"

# Options:
shopt -s autocd # Automatically `cd` into directories you type out (never use `cd` again!)
shopt -s cdspell # Correct minor spelling mistakes when `cd`ing

# Keybinds:

# Enable fancier auto-complete
bind 'set show-all-if-ambiguous on' # Still list files if no match
bind 'TAB:menu-complete'
bind 'set menu-complete-display-prefix on'
bind 'set colored-completion-prefix on'
bind 'set colored-stats on'

export Sw_BASHRC_READ=true # To know that my personal bashrc was read fully!
debug "Finished bashrc processing."
unset -f debug
