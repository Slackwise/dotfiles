" vim: fdm=marker
" Author:       Adam Flanczewski <http://slackwi.se>
" Description:  My personal vimrc file.
"               I do not recommend using it as-is. Just grab any lines you
"               may find useful out of it.



"       #######################
"       ### Lost? Press zR ####
"       #######################



" INITALIZATION ------------------------------------------------------------{{{
source $VIMRUNTIME/vimrc_example.vim    " Has some good defaults that I am now
                                        " used to.
source $VIMRUNTIME/mswin.vim            " Always behave Windows-like, because
                                        " I like my Ctrl-X/C/V/S bindings.
let $VIMDIR = $HOME . "/.vim/"
let $VIMGIT = $HOME . "/src/dotfiles/vim/"
let $MYVIMRC = $VIMGIT . "vimrc"
set rtp+=$VIMDIR
set rtp+=~/src/dotfiles/vim/
let &dir = finddir("swap", &rtp)
let &backupdir = finddir("backup", &rtp)
let &viminfo = $VIMDIR . "viminfo"
" }}}---------------------------------


" PLUGIN CONFIGURATION -----------------------------------------------------{{{
try
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
catch
	    " Do nothing!
endtry

if exists("*vundle#rc")
    Bundle 'gmarik/vundle'
    Bundle 'repeat.vim'
    Bundle 'surround.vim'
    Bundle 'tpope/vim-commentary'
    Bundle 'tpope/vim-fugitive'
    Bundle 'tpope/vim-markdown'
    Bundle 'colornames'
    " Bundle 'yurifury/hexHighlight'
    " Bundle 'astashov/vim-ruby-debugger'
endif
" }}}---------------------------------


" CUSTOM KEYBINDINGS -------------------------------------------------------{{{
" I never use 's' for anything I'd rather us 'c' for, so I've decided to use
" it for my own personal scripts and utilities.
nmap ss .
nmap sw :w<CR>
nmap sh :call ScrollbindHorizontal()<CR>
nmap sV :edit $MYVIMRC<CR>
nmap sC :call SynStack()<CR>
nmap <F5> :w<CR>:!%<CR>
nmap <S-Return> i<Return><Esc>
nmap <Return> o<Esc>
nmap n nzz
nmap N Nzz
" }}}---------------------------------


" BASE SETTINGS ------------------------------------------------------------{{{
"if $USERDOMAIN == "MILLNET" | set guioptions+=b | endif
if has("syntax") | set colorcolumn=81 | endif " Highlight column 81
set shortmess+=I        " Disable :intro
set nowrap              " Do not wrap lines
set backup
try | colorscheme hemisu | catch /^Vim\%((\a\+)\)\=:E185/ | colorscheme slate | endtry
set background=dark
set tabstop=4                " How many columns <Tab> counts for
" set softtabstop=4          " Causes backspace to delete X spaces
set shiftwidth=4             " Number of spaces to use for each step of (auto)indent
set smarttab                 " Uses shiftwidth instead of tabstop at start of lines 
set expandtab                " Expand tabs into spaces of tabstop size
" set textwidth=72             " Let 'gq' format text to within 72 columns (AutoCmd on zRntax to 80 for code)
syntax on                    " Enable syntax highlighting
filetype on                  " Enable filetype detection
filetype indent on           " Enable filetype-specific indenting
filetype plugin on           " Enable filetype-specific plugins
au Syntax * set textwidth=80 " Set tw for code files, versus plain text
" }}}---------------------------------


" UTILITY FUNCTIONS --------------------------------------------------------{{{
function FindInPath(filename)
    let paths = split($PATH, has("win32") ? ';' : ':')
    for path in paths
        let filepath = findfile(a:filename, resolve(path))
        if filepath != '' | return shellescape(filepath) | endif
    endfor
    " returns '' if filname not found in $PATH
endfunction

function ToggleFlag(option, flag)
  exec ('let lopt = &' . a:option)
  if lopt =~ (".*" . a:flag . ".*")
    exec ('set ' . a:option . '-=' . a:flag)
  else
    exec ('set ' . a:option . '+=' . a:flag)
  endif
endfunction

function SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction

function ScrollbindHorizontal()
    windo set scrollopt=hor
    windo set scrollbind
    set guioptions+=b
endfunction
" }}}---------------------------------


" RUBY SPECIFIC SETTINGS ---------------------------------------------------{{{
autocmd FileType ruby,eruby set tabstop=2 | set shiftwidth=2 | set expandtab
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
" }}}---------------------------------
"

" HEX EDITING --------------------------------------------------------------{{{
" vim -b : edit binary using xxd-format!
augroup Binary
    au!
    au BufReadPre  *.bin,*.exe let &bin=1
    au BufReadPost *.bin,*.exe if &bin | %!xxd
    au BufReadPost *.bin,*.exe set ft=xxd | endif
    au BufWritePre *.bin,*.exe if &bin | %!xxd -r
    au BufWritePre *.bin,*.exe endif
    au BufWritePost *.bin,*.exe if &bin | %!xxd
    au BufWritePost *.bin,*.exe set nomod | endif
augroup END
" }}}---------------------------------


" GUI SETTINGS -------------------------------------------------------------{{{
if has("gui_running")
    set lines=45            " Increase default height of window
    set guioptions-=T       " Disable toolbar in gVim
    try
        set guifont=DejaVu_Sans_Mono:h9:cANSI
    catch
        try
            set guifont=Consolas:h9:cANSI
        catch
            call confirm("Could not set desired fonts. :(")
        endtry
    endtry
endif
" }}}---------------------------------


" WINDOWS SPECIFIC SETTINGS ------------------------------------------------{{{
if has("win32")
    let g:netrw_scp_cmd="\c:\\bin\\pscp.exe"
    
    set diffexpr=MyDiff()
    function MyDiff()
        let opt = '-a --binary '
        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
        let arg1 = v:fname_in
        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
        let arg2 = v:fname_new
        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
        let arg3 = v:fname_out
        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
        let eq = ''
        if $VIMRUNTIME =~ ' '
            if &sh =~ '\<cmd'
                let cmd = '""' . $VIMRUNTIME . '\diff"'
                let eq = '"'
            else
                let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
            endif
        else
            let cmd = $VIMRUNTIME . '\diff'
        endif
        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction
endif
" }}}---------------------------------
